<!DOCTYPE html>
<!-- UPDATED EOB TEMPLATE v2.0 - Card-based interface with expandable details -->
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Funding Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
            color: #2c3e50;
            line-height: 1.6;
        }

        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
        }

        .header-left h1 {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
        }

        .header-left p {
            opacity: 0.9;
            font-size: 0.9rem;
        }

        .search-new-patient-btn {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 600;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .search-new-patient-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.5);
            transform: translateY(-1px);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .current-patient-info {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1rem 1.5rem;
            margin-bottom: 1.5rem;
            border-left: 4px solid #667eea;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .current-patient-label {
            color: #6c757d;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .current-patient-name {
            color: #2c3e50;
            font-weight: 600;
            font-size: 1rem;
        }

        .grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
            border: 1px solid #e1e8ed;
        }

        .card h2 {
            color: #2c3e50;
            margin-bottom: 1rem;
            font-size: 1.3rem;
            border-bottom: 2px solid #667eea;
            padding-bottom: 0.5rem;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .section-header h2 {
            margin-bottom: 0;
            border-bottom: none;
            padding-bottom: 0;
        }

        .refresh-btn {
            background: #667eea;
            color: white;
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .refresh-btn:hover {
            background: #5a6fd8;
            transform: rotate(180deg);
        }

        .refresh-btn:active {
            transform: rotate(360deg);
        }

        .refresh-btn.loading {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .patient-info {
            grid-column: 1 / -1;
        }

        .patient-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
        }

        .detail-label {
            font-size: 0.8rem;
            color: #7f8c8d;
            text-transform: uppercase;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .detail-value {
            font-size: 1rem;
            font-weight: 500;
            color: #2c3e50;
        }

        .funding-summary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            grid-column: 1 / -1;
        }

        .funding-summary h2 {
            color: white;
            border-bottom-color: rgba(255,255,255,0.3);
        }

        .funding-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1.5rem;
        }

        .funding-item {
            text-align: center;
        }

        .funding-amount {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .funding-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .insurance-section {
            grid-column: 1 / -1;
        }

        .insurance-list {
            list-style: none;
        }

        .insurance-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            border-left: 4px solid #667eea;
        }

        .insurance-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .insurance-name {
            font-weight: 600;
            color: #2c3e50;
        }

        .insurance-status {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-active {
            background: #d4edda;
            color: #155724;
        }

        .status-inactive {
            background: #f8d7da;
            color: #721c24;
        }

        .eob-section {
            grid-column: 1 / -1;
        }

        .eob-count {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 1rem;
            font-style: italic;
        }

        .eob-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .eob-table th,
        .eob-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e1e8ed;
        }

        .eob-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #2c3e50;
        }

        .eob-table tr:hover {
            background: #f8f9fa;
        }

        .view-eob-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background 0.3s ease;
        }

        .view-eob-btn:hover {
            background: #5a6fd8;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        .eob-details {
            margin-top: 1rem;
        }

        .eob-section-detail {
            margin-bottom: 2rem;
        }

        .eob-section-detail h3 {
            color: #2c3e50;
            margin-bottom: 1rem;
            border-bottom: 1px solid #e1e8ed;
            padding-bottom: 0.5rem;
        }

        .loading {
            text-align: center;
            padding: 2rem;
            color: #7f8c8d;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }

        .eob-detail-card {
            background: #f8f9fa;
            border: 1px solid #e1e8ed;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .eob-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e1e8ed;
        }

        .eob-basic-info h3 {
            margin-bottom: 0.5rem;
            font-size: 1.1rem;
            color: #2c3e50;
        }

        .eob-status-badge {
            padding: 0.4rem 0.8rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .eob-actions {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .submit-copay-btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .submit-copay-btn:hover {
            background: #5a6fd8;
            transform: translateY(-1px);
        }

        .submit-copay-btn:disabled {
            background: #95a5a6;
            cursor: not-allowed;
            transform: none;
        }

        .submission-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-left: 1rem;
            font-size: 0.8rem;
            color: #555;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #4CAF50;
            animation: pulse 2s infinite;
        }

        .status-indicator.error {
            background-color: #f44336;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .eob-summary {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #e1e8ed;
        }

        .eob-summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 0.75rem;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            background: white;
            border-radius: 6px;
            border: 1px solid #e1e8ed;
        }

        .summary-label {
            font-size: 0.8rem;
            color: #7f8c8d;
            font-weight: 600;
        }

        .summary-value {
            font-size: 1rem;
            font-weight: 500;
            color: #2c3e50;
        }

        .eob-line-items {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #e1e8ed;
        }

        .eob-line-items h4 {
            margin-bottom: 0.75rem;
            font-size: 1rem;
            color: #34495e;
        }

        .line-items-loading {
            text-align: center;
            padding: 1rem;
            color: #7f8c8d;
        }

        .eob-toggle {
            margin-top: 1rem;
            text-align: center;
        }

        .toggle-details-btn {
            background: #e1e8ed;
            color: #34495e;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .toggle-details-btn:hover {
            background: #d1d8dc;
            transform: translateY(-1px);
        }

        .toggle-text {
            font-weight: 600;
        }

        .toggle-icon {
            font-size: 0.8rem;
            transition: transform 0.3s ease;
        }

        .toggle-icon.open {
            transform: rotate(180deg);
        }

        /* Enhanced table styling for line items */
        .eob-line-items .eob-table {
            margin-top: 1rem;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .eob-line-items .eob-table th {
            background: #667eea;
            color: white;
            font-weight: 600;
            padding: 1rem 0.75rem;
        }

        .eob-line-items .eob-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #e1e8ed;
        }

        .eob-line-items .eob-table tr:hover {
            background: #f8f9fa;
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            
            .search-new-patient-btn {
                padding: 0.5rem 1rem;
                font-size: 0.8rem;
            }
            
            .current-patient-info {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.25rem;
            }
            
            .grid {
                grid-template-columns: 1fr;
            }
            
            .funding-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .container {
                padding: 1rem;
            }

            .eob-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .eob-actions {
                width: 100%;
                justify-content: space-between;
            }

            .eob-summary-grid {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }

            .summary-item {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.25rem;
            }

            .submission-status {
                margin-left: 0;
                margin-top: 0.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <div class="header-left">
                <h1>💰 Patient Funding Dashboard</h1>
                <p>Real-time patient funding and payment information</p>
            </div>
            <div class="header-right">
                <a href="/patient-search" class="search-new-patient-btn">
                    🔍 Co-pay Assistant
                </a>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Current Patient Info -->
        <div class="current-patient-info">
            <span class="current-patient-label">Currently viewing:</span>
            <span class="current-patient-name"><%= fundingData.patient.name %></span>
        </div>
        
        <!-- Patient Information -->
        <div class="card patient-info">
            <h2>👤 Patient Information</h2>
            <div class="patient-details">
                <div class="detail-item">
                    <span class="detail-label">Name</span>
                    <span class="detail-value"><%= fundingData.patient.name %></span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">MRN</span>
                    <span class="detail-value"><%= fundingData.patient.mrn || 'N/A' %></span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Date of Birth</span>
                    <span class="detail-value"><%= fundingData.patient.birthDate || 'N/A' %></span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Gender</span>
                    <span class="detail-value"><%= fundingData.patient.gender || 'N/A' %></span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Phone</span>
                    <span class="detail-value"><%= fundingData.patient.phone || 'N/A' %></span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">Email</span>
                    <span class="detail-value"><%= fundingData.patient.email || 'N/A' %></span>
                </div>
            </div>
        </div>

        <!-- Funding Summary -->
        <div class="card funding-summary">
            <h2>💳 Funding Summary</h2>
            <div class="funding-grid">
                <div class="funding-item">
                    <div class="funding-amount">$<%= fundingData.fundingSummary.totalBilled.toFixed(2) %></div>
                    <div class="funding-label">Total Billed</div>
                </div>
                <div class="funding-item">
                    <div class="funding-amount">$<%= fundingData.fundingSummary.totalCovered.toFixed(2) %></div>
                    <div class="funding-label">Insurance Covered</div>
                </div>
                <div class="funding-item">
                    <div class="funding-amount">$<%= fundingData.fundingSummary.totalPatientResponsibility.toFixed(2) %></div>
                    <div class="funding-label">Patient Responsibility</div>
                </div>
                <div class="funding-item">
                    <div class="funding-amount">$<%= fundingData.fundingSummary.totalCopay.toFixed(2) %></div>
                    <div class="funding-label">Copay</div>
                </div>
                <div class="funding-item">
                    <div class="funding-amount">$<%= fundingData.fundingSummary.totalDeductible.toFixed(2) %></div>
                    <div class="funding-label">Deductible</div>
                </div>
                <div class="funding-item">
                    <div class="funding-amount">$<%= fundingData.fundingSummary.remainingBalance.toFixed(2) %></div>
                    <div class="funding-label">Remaining Balance</div>
                </div>
            </div>
        </div>

        <!-- Insurance Information -->
        <div class="card insurance-section">
            <div class="section-header">
                <h2>🏥 Insurance Coverage</h2>
                <button class="refresh-btn" onclick="refreshInsurance()" title="Refresh Insurance Data">
                    🔄
                </button>
            </div>
            <% if (fundingData.coverage && fundingData.coverage.length > 0) { %>
                <ul class="insurance-list">
                    <% fundingData.coverage.forEach(function(coverage) { %>
                        <li class="insurance-item">
                            <div class="insurance-header">
                                <span class="insurance-name"><%= coverage.type || 'Insurance Coverage' %></span>
                                <span class="insurance-status <%= coverage.status === 'active' ? 'status-active' : 'status-inactive' %>">
                                    <%= coverage.status || 'Unknown' %>
                                </span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Subscriber</span>
                                <span class="detail-value"><%= coverage.subscriber || 'N/A' %></span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Payor</span>
                                <span class="detail-value"><%= coverage.payor ? coverage.payor.join(', ') : 'N/A' %></span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Period</span>
                                <span class="detail-value">
                                    <%= coverage.period?.start || 'N/A' %> - <%= coverage.period?.end || 'Ongoing' %>
                                </span>
                            </div>
                        </li>
                    <% }); %>
                </ul>
            <% } else { %>
                <p>No insurance coverage information available.</p>
            <% } %>
        </div>

        <!-- Explanation of Benefits -->
        <div class="card eob-section">
            <div class="section-header">
                <h2>📋 Explanation of Benefits (EOB)</h2>
                <button class="refresh-btn" onclick="refreshEOB()" title="Refresh EOB Data">
                    🔄
                </button>
            </div>
            <% if (fundingData.eobs && fundingData.eobs.length > 0) { %>
                <p class="eob-count">Found <%= fundingData.eobs.length %> Explanation of Benefit(s)</p>
                <% fundingData.eobs.forEach(function(eob, eobIndex) { %>
                    <div class="eob-detail-card" data-eob-id="<%= eob.id %>">
                        <div class="eob-header">
                            <div class="eob-basic-info">
                                <h3>Claim ID: <%= eob.id %></h3>
                                <div class="eob-status-badge <%= eob.status === 'active' ? 'status-active' : 'status-inactive' %>">
                                    <%= eob.status %>
                                </div>
                            </div>
                            <div class="eob-actions">
                                <button class="submit-copay-btn" onclick="submitForCopay('<%= eob.id %>')" data-eob-id="<%= eob.id %>">
                                    Submit for Copay
                                </button>
                                <div class="submission-status" id="status-<%= eob.id %>" style="display: none;">
                                    <span class="status-indicator"></span>
                                    <span class="status-text"></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="eob-summary">
                            <div class="eob-summary-grid">
                                <div class="summary-item">
                                    <span class="summary-label">Type:</span>
                                    <span class="summary-value"><%= eob.type?.coding?.[0]?.display || eob.type?.text || eob.type || 'N/A' %></span>
                                </div>
                                <div class="summary-item">
                                    <span class="summary-label">Service Date:</span>
                                    <span class="summary-value"><%= eob.billablePeriod?.start || 'N/A' %></span>
                                </div>
                                <div class="summary-item">
                                    <span class="summary-label">Provider:</span>
                                    <span class="summary-value"><%= eob.provider || 'N/A' %></span>
                                </div>
                                <div class="summary-item">
                                    <span class="summary-label">Total Amount:</span>
                                    <span class="summary-value total-amount">$<%= helpers.calculateTotalAmount(eob).toFixed(2) %></span>
                                </div>
                                <div class="summary-item">
                                    <span class="summary-label">Patient Responsibility:</span>
                                    <span class="summary-value patient-resp">$<%= helpers.calculatePatientResponsibility(eob).toFixed(2) %></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="eob-line-items" id="line-items-<%= eob.id %>" style="display: none;">
                            <h4>Service Line Items</h4>
                            <div class="line-items-loading">Loading line items...</div>
                        </div>
                        
                        <div class="eob-toggle">
                            <button class="toggle-details-btn" onclick="toggleEOBDetails('<%= eob.id %>')">
                                <span class="toggle-text">Show Details</span>
                                <span class="toggle-icon">▼</span>
                            </button>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <p>No Explanation of Benefits available.</p>
            <% } %>
        </div>
    </div>

    <script>
        function toggleEOBDetails(eobId) {
            const lineItemsDiv = document.getElementById(`line-items-${eobId}`);
            const toggleBtn = document.querySelector(`.eob-detail-card[data-eob-id="${eobId}"] .toggle-details-btn`);
            const toggleIcon = toggleBtn.querySelector('.toggle-icon');

            if (lineItemsDiv.style.display === 'none') {
                lineItemsDiv.style.display = 'block';
                toggleIcon.textContent = '▲';
                toggleIcon.classList.add('open');
                // Fetch and display line items
                fetchLineItems(eobId);
            } else {
                lineItemsDiv.style.display = 'none';
                toggleIcon.textContent = '▼';
                toggleIcon.classList.remove('open');
            }
        }

        async function fetchLineItems(eobId) {
            const lineItemsDiv = document.getElementById(`line-items-${eobId}`);
            const loadingDiv = lineItemsDiv.querySelector('.line-items-loading');
            loadingDiv.textContent = 'Loading line items...';

            try {
                const response = await fetch(`/funding/api/eob/${eobId}/line-items`);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                displayLineItems(data, eobId);
            } catch (error) {
                console.error('Error fetching line items:', error);
                loadingDiv.textContent = 'Error loading line items.';
            }
        }

        function displayLineItems(lineItems, eobId) {
            const lineItemsDiv = document.getElementById(`line-items-${eobId}`);
            let html = `
                <table class="eob-table">
                    <thead>
                        <tr>
                            <th>Service</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Billed</th>
                            <th>Patient Responsibility</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            lineItems.forEach(item => {
                const billedAmount = item.net?.value || 0;
                
                // Debug: Log adjudication data
                console.log('Item adjudications:', item.adjudication);
                
                const coveredAmount = item.adjudication?.reduce((sum, adj) => {
                    const categoryText = getTextFromFHIR(adj.category);
                    console.log('Adjudication category:', categoryText, 'amount:', adj.amount?.value);
                    if (categoryText.toLowerCase().includes('benefit')) return sum + (adj.amount?.value || 0);
                    return sum;
                }, 0) || 0;
                
                let patientResponsibility = item.adjudication?.reduce((sum, adj) => {
                    const categoryText = getTextFromFHIR(adj.category);
                    console.log('Adjudication category:', categoryText, 'amount:', adj.amount?.value);
                    if (categoryText.toLowerCase().includes('patient') || 
                        categoryText.toLowerCase().includes('responsibility') ||
                        categoryText.toLowerCase().includes('deductible') ||
                        categoryText.toLowerCase().includes('copay')) {
                        return sum + (adj.amount?.value || 0);
                    }
                    return sum;
                }, 0) || 0;
                
                // If no specific patient responsibility found, calculate as billed - covered
                if (patientResponsibility === 0 && billedAmount > 0) {
                    patientResponsibility = billedAmount - coveredAmount;
                    console.log('Calculated patient responsibility as billed - covered:', patientResponsibility);
                }
                
                // Debug: Log date information
                console.log('Item date info:', {
                    servicedPeriodStart: item.servicedPeriodStart,
                    servicedPeriodEnd: item.servicedPeriodEnd,
                    servicedDate: item.servicedDate,
                    servicedPeriod: item.servicedPeriod
                });
                
                // Format the service dates
                let startDate = 'N/A';
                let endDate = 'N/A';
                
                if (item.servicedPeriodStart) {
                    startDate = item.servicedPeriodStart;
                } else if (item.servicedPeriod?.start) {
                    startDate = item.servicedPeriod.start;
                } else if (item.servicedDate) {
                    startDate = item.servicedDate;
                }
                
                if (item.servicedPeriodEnd) {
                    endDate = item.servicedPeriodEnd;
                } else if (item.servicedPeriod?.end) {
                    endDate = item.servicedPeriod.end;
                } else if (item.servicedDate) {
                    endDate = item.servicedDate;
                }
                
                html += `
                    <tr>
                        <td>${getTextFromFHIR(item.productOrService)}</td>
                        <td>${startDate}</td>
                        <td>${endDate}</td>
                        <td>$${billedAmount.toFixed(2)}</td>
                        <td>$${patientResponsibility.toFixed(2)}</td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
            `;
            lineItemsDiv.innerHTML = html;
        }

        function submitForCopay(eobId) {
            const statusDiv = document.getElementById(`status-${eobId}`);
            const statusIndicator = statusDiv.querySelector('.status-indicator');
            const statusText = statusDiv.querySelector('.status-text');
            const submitBtn = document.querySelector(`.eob-detail-card[data-eob-id="${eobId}"] .submit-copay-btn`);

            statusDiv.style.display = 'block';
            statusIndicator.style.backgroundColor = '#4CAF50'; // Green for success
            statusText.textContent = 'Submitting...';
            submitBtn.disabled = true;

            fetch(`/funding/api/eob/${eobId}/submit-for-copay`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Submission successful:', data);
                statusIndicator.style.backgroundColor = '#4CAF50'; // Green for success
                statusText.textContent = 'Submission successful!';
                statusText.style.color = '#155724';
                submitBtn.disabled = false;
                // Optionally, update the EOB card in the UI to reflect the new status
                const eobCard = document.querySelector(`.eob-detail-card[data-eob-id="${eobId}"]`);
                const statusBadge = eobCard.querySelector('.eob-status-badge');
                statusBadge.classList.remove('status-inactive');
                statusBadge.classList.add('status-active');
                statusBadge.textContent = 'Active';
            })
            .catch(error => {
                console.error('Submission failed:', error);
                statusIndicator.style.backgroundColor = '#f44336'; // Red for error
                statusText.textContent = 'Submission failed: ' + error.message;
                statusText.style.color = '#721c24';
                submitBtn.disabled = false;
            });
        }

        // Helper function to safely extract text from FHIR objects
        function getTextFromFHIR(obj) {
            if (!obj) return 'N/A';
            if (typeof obj === 'string') return obj;
            if (obj.text) return obj.text;
            if (obj.display) return obj.display;
            if (obj.value) return obj.value;
            if (obj.coding && obj.coding.length > 0) {
                return obj.coding[0].display || obj.coding[0].code || 'N/A';
            }
            return 'N/A';
        }

        // Refresh Insurance Coverage
        async function refreshInsurance() {
            const refreshBtn = document.querySelector('.insurance-section .refresh-btn');
            const insuranceSection = document.querySelector('.insurance-section');
            
            try {
                refreshBtn.classList.add('loading');
                refreshBtn.disabled = true;
                
                const response = await fetch('/funding/api/insurance');
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                // Update insurance section
                const insuranceList = insuranceSection.querySelector('.insurance-list');
                if (data.coverage && data.coverage.length > 0) {
                    insuranceList.innerHTML = data.coverage.map(coverage => `
                        <li class="insurance-item">
                            <div class="insurance-header">
                                <span class="insurance-name">${coverage.type || 'Insurance Coverage'}</span>
                                <span class="insurance-status ${coverage.status === 'active' ? 'status-active' : 'status-inactive'}">
                                    ${coverage.status || 'Unknown'}
                                </span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Subscriber</span>
                                <span class="detail-value">${coverage.subscriber || 'N/A'}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Payor</span>
                                <span class="detail-value">${coverage.payor ? coverage.payor.join(', ') : 'N/A'}</span>
                            </div>
                            <div class="detail-item">
                                <span class="detail-label">Period</span>
                                <span class="detail-value">
                                    ${coverage.period?.start || 'N/A'} - ${coverage.period?.end || 'Ongoing'}
                                </span>
                            </div>
                        </li>
                    `).join('');
                } else {
                    insuranceList.innerHTML = '<p>No insurance coverage information available.</p>';
                }
                
                console.log('✅ Insurance data refreshed successfully');
            } catch (error) {
                console.error('❌ Error refreshing insurance data:', error);
                alert('Error refreshing insurance data: ' + error.message);
            } finally {
                refreshBtn.classList.remove('loading');
                refreshBtn.disabled = false;
            }
        }

        // Helpers used for refresh calculations (mirror server-side logic)
        function toNumericAmount(input) {
            if (input == null) return 0;
            if (typeof input === 'number') return isFinite(input) ? input : 0;
            if (typeof input === 'string') {
                const parsed = parseFloat(input.replace(/[^0-9.-]/g, ''));
                return isNaN(parsed) ? 0 : parsed;
            }
            if (typeof input === 'object') {
                if (Object.prototype.hasOwnProperty.call(input, 'value')) {
                    return toNumericAmount(input.value);
                }
                // FHIR Money may be like { currency, value }, or custom shapes
            }
            return 0;
        }

        function calcTotalAmountFromEOB(eob) {
            if (eob && Array.isArray(eob.total) && eob.total.length > 0) {
                const found = eob.total.find(total => {
                    const code = total.categoryCode || total.category?.coding?.[0]?.code;
                    const text = (getTextFromFHIR(total.category) || '').toLowerCase();
                    return code === 'submitted' || text.includes('submitted') || text.includes('billed') || text.includes('charge');
                });
                if (found) {
                    return toNumericAmount(found.amount);
                }
                const sumTotals = eob.total.reduce((sum, total) => {
                    return sum + toNumericAmount(total.amount);
                }, 0);
                if (sumTotals > 0) return sumTotals;
            }
            if (eob && Array.isArray(eob.item) && eob.item.length > 0) {
                return eob.item.reduce((sum, item) => sum + toNumericAmount(item.net), 0);
            }
            return 0;
        }

        function calcPatientRespFromEOB(eob) {
            if (eob && Array.isArray(eob.total) && eob.total.length > 0) {
                const found = eob.total.find(total => {
                    const text = (getTextFromFHIR(total.category) || '').toLowerCase();
                    return text.includes('patient') || text.includes('responsibility') || text.includes('copay') || text.includes('deductible');
                });
                if (found) {
                    return toNumericAmount(found.amount);
                }
            }
            if (eob && Array.isArray(eob.item) && eob.item.length > 0) {
                let total = 0;
                eob.item.forEach(item => {
                    if (Array.isArray(item.adjudication) && item.adjudication.length > 0) {
                        item.adjudication.forEach(adj => {
                            const text = (getTextFromFHIR(adj.category) || '').toLowerCase();
                            if (text.includes('patient') || text.includes('responsibility') || text.includes('copay') || text.includes('deductible')) {
                                total += toNumericAmount(adj.amount);
                            }
                        });
                    }
                });
                return total;
            }
            return 0;
        }

        // Refresh Explanation of Benefits
        async function refreshEOB() {
            const refreshBtn = document.querySelector('.eob-section .refresh-btn');
            const eobSection = document.querySelector('.eob-section');
            
            try {
                refreshBtn.classList.add('loading');
                refreshBtn.disabled = true;
                
                const response = await fetch('/funding/api/eob');
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                // Update EOB section
                const eobCards = eobSection.querySelectorAll('.eob-detail-card');
                const eobCount = eobSection.querySelector('.eob-count');
                
                if (data.eobs && data.eobs.length > 0) {
                    eobCount.innerHTML = `Found ${data.eobs.length} Explanation of Benefit(s)`;
                    
                    eobCards.forEach(card => {
                        const eobId = card.dataset.eobId;
                        const eob = data.eobs.find(e => e.id === eobId);
                        if (e) {
                            const statusBadge = card.querySelector('.eob-status-badge');
                            statusBadge.textContent = e.status;
                            statusBadge.classList.remove('status-inactive');
                            statusBadge.classList.add(e.status === 'active' ? 'status-active' : 'status-inactive');

                            const totalAmountSpan = card.querySelector('.eob-summary .summary-value.total-amount');
                            const patientRespSpan = card.querySelector('.eob-summary .summary-value.patient-resp');
                            const totalAmount = calcTotalAmountFromEOB(e);
                            const patientResp = calcPatientRespFromEOB(e);
                            if (totalAmountSpan) totalAmountSpan.textContent = `$${totalAmount.toFixed(2)}`;
                            if (patientRespSpan) patientRespSpan.textContent = `$${patientResp.toFixed(2)}`;

                            // Reset line items and toggle state
                            const lineItemsDiv = card.querySelector('.eob-line-items');
                            lineItemsDiv.style.display = 'none';
                            const toggleBtn = card.querySelector('.eob-toggle .toggle-details-btn');
                            toggleBtn.querySelector('.toggle-text').textContent = 'Show Details';
                            toggleBtn.querySelector('.toggle-icon').textContent = '▼';
                            toggleBtn.classList.remove('open');
                        }
                    });
                } else {
                    eobCount.innerHTML = 'No Explanation of Benefits available.';
                    eobSection.querySelectorAll('.eob-detail-card').forEach(card => {
                        card.style.display = 'none';
                    });
                }
                
                console.log('✅ EOB data refreshed successfully');
            } catch (error) {
                console.error('❌ Error refreshing EOB data:', error);
                alert('Error refreshing EOB data: ' + error.message);
            } finally {
                refreshBtn.classList.remove('loading');
                refreshBtn.disabled = false;
            }
        }
    </script>
</body>
</html>
